'''
Trains a Resnet50 network on CIFAR10 small image dataset.

Captures approximate profiling results for:
1. Training time
2. Number of images processed per second
3. Training and test accuracy.

You can change following environment variables to generate profiling for different setup.
1. KERAS_BACKEND - mxnet or tensorflow
2. MXNET_KERAS_TEST_MACHINE - CPU OR GPU
3. GPU_NUM - Integer. If it is GPU machine. Ex: 16 to indicate how many GPUs to used for profiling.

You can also change following important variables:
1. batch_size - Batch size.
2. nb_epoch - Number of epochs.

This script is intended to be used for capturing relative performance profiles of different Keras backends.
'''

from __future__ import print_function
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils

import numpy as np
np.random.seed(1337)  # for reproducibility

from os import environ

from keras.datasets import mnist
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation
from keras.optimizers import SGD
from keras.utils import np_utils

from keras.applications.resnet50 import ResNet50
from utils.resnet import ResnetBuilder

# Imports for benchmarking
from utils.profiler import profile
from utils.model_util import make_model

# Other environment variables
KERAS_BACKEND = environ['KERAS_BACKEND']
MACHINE_TYPE = environ['MXNET_KERAS_TEST_MACHINE']
IS_GPU = (environ['MXNET_KERAS_TEST_MACHINE'] == 'GPU')
MACHINE_TYPE = 'GPU' if IS_GPU else 'CPU'
GPU_NUM = int(environ['GPU_NUM']) if IS_GPU else 0

# Dictionary to store profiling output
profile_output = {}

batch_size = 64
nb_classes = 10
nb_epoch = 10 # Should be atleast 200 for ideal accuracy
data_augmentation = True

# input image dimensions
img_rows, img_cols = 32, 32
# The CIFAR10 images are RGB.
img_channels = 3

# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)


model = ResnetBuilder.build_resnet_50((3, 32, 32), nb_classes)
#model = ResNet50(include_top=False, weights=None, input_shape=X_train.shape[1:])
model.summary()
model = make_model(model, loss='categorical_crossentropy', optimizer=SGD(), metrics=['accuracy'])

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

def train_model():

    if not data_augmentation:
        print('Not using data augmentation.')
        history = model.fit(X_train, Y_train,
          batch_size=batch_size,
          nb_epoch=nb_epoch,
          validation_data=(X_test, Y_test),
          shuffle=True)
        profile_output['TRAIN_ACCURACY'] = history.history['acc'][-1]
    else:
        print('Using real-time data augmentation.')
        # This will do preprocessing and realtime data augmentation:
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False)  # randomly flip images

        # Compute quantities required for featurewise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(X_train)

        # Fit the model on the batches generated by datagen.flow().
        history = model.fit_generator(datagen.flow(X_train, Y_train,
                                 batch_size=batch_size),
                    samples_per_epoch=X_train.shape[0],
                    nb_epoch=nb_epoch,
                    validation_data=(X_test, Y_test))
        profile_output['TRAIN_ACCURACY'] = history.history['acc'][-1]


# Calling training and profile memory usage
profile_output["MODEL"] = "RESTNET50"
run_time, memory_usage = profile(train_model)

profile_output['TRAINING_TIME'] = float(run_time)

score = model.evaluate(X_test, Y_test, verbose=0)
profile_output["TEST_ACCURACY"] = score[1]

# CIFAR has 50000 training images and 10000 validation images processed in an epoch.
# Number of images processed per second =  total number of images processed / Average time per epoch in secs
no_images_processed_per_second = 60000 / (profile_output['TRAINING_TIME'] / nb_epoch)

print("\n===============Profiling Results===============\n")
print("\n====SET UP====\n")
print("RESTNET50 Architecture")
print("Using Backend - ", KERAS_BACKEND)
print("Machine Type - ", MACHINE_TYPE)
print("Number of GPUs used for benchmarking - ", GPU_NUM)
print("Trained on CIFAR dataset with 50,000 32*32 images for training and 10,000 32*32 images for validation")
print("Number of Epochs - ", nb_epoch)
print("Batch size - ", batch_size)
print("Optimizer used - SGD ")
print("\n====PROFILE RESULTS====\n")
print("Number of images processed per second - ", no_images_processed_per_second)
print("Maximum total memory consumption - ", memory_usage)
print("Training Time (in secs) - ", profile_output['TRAINING_TIME'])
print("Training Accuracy (not optimized) - ", profile_output['TRAIN_ACCURACY'])
print("Test Accuracy (not optimized) - ", profile_output["TEST_ACCURACY"])
